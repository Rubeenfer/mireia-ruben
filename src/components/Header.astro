---
import { Logo } from "../icons";
import ThemeToogle from "./ThemeToogle.astro";
import { Image } from "astro:assets";
import { translations } from "../i18n/translations";

type LanguageCode = "es" | "ca" | "en";
interface Props {
  lang?: LanguageCode;
}
const { lang = "es" }: Props = Astro.props;
const t = translations[lang];
---

<header
  class="bg-cream fixed left-0 right-0 top-0 z-50 bg-opacity-90 shadow-md transition-colors duration-300 dark:bg-gray-900 dark:bg-opacity-90"
>
  <div class="container mx-auto px-4 py-4">
    <div class="flex items-center justify-between">
      <a href="#" class="text-burgundy dark:text-gold text-2xl font-bold">
        <Image
          id="logo"
          alt="logo"
          class="h-16 w-16 text-secondary"
          src={Logo}
        />
      </a>

      <nav class="hidden space-x-6 md:flex">
        {
          Object.entries(t.nav).map(([key, value]) => (
            <a
              href={`#${key}`}
              class="text-kalam dark:hover:text-gold font-light text-gray-700 transition-colors duration-300 dark:text-gray-300"
            >
              {value}
            </a>
          ))
        }
      </nav>

      <div class="flex items-center space-x-4">
        <select
          id="language-select"
          class="bg-cream focus:ring-burgundy dark:focus:ring-gold rounded-md border border-gray-300 px-2 py-1 text-gray-700 focus:outline-none focus:ring-2 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-300"
        >
          <option value="es" selected={lang === "es"}>ES</option>
          <option value="ca" selected={lang === "ca"}>CA</option>
          <option value="en" selected={lang === "en"}>EN</option>
        </select>

        <ThemeToogle />
      </div>
    </div>
  </div>

  <div
    id="mobile-menu"
    class="bg-cream hidden shadow-md dark:bg-gray-900 md:hidden"
  >
    <nav class="container mx-auto flex flex-col space-y-2 px-4 py-2">
      {
        Object.entries(t.nav).map(([key, value]) => (
          <a
            href={`#${key}`}
            class="hover:text-burgundy dark:hover:text-gold text-gray-700 transition-colors duration-300 dark:text-gray-300"
          >
            {value}
          </a>
        ))
      }
    </nav>
  </div>
</header>

<script>
  import { Logo, WhiteLogo } from "../icons";

  const menuToggle = document.getElementById("menu-toggle") as HTMLElement;
  const mobileMenu = document.getElementById("mobile-menu") as HTMLElement;
  const languageSelect = document.getElementById(
    "language-select",
  ) as HTMLSelectElement;

  menuToggle.addEventListener("click", () => {
    mobileMenu.classList.toggle("hidden");
  });

  const mobileLinks = mobileMenu.querySelectorAll("a");
  mobileLinks.forEach((link) => {
    link.addEventListener("click", () => {
      mobileMenu.classList.add("hidden");
    });
  });

  languageSelect.addEventListener("change", (event) => {
    const newLang = (event.target as HTMLSelectElement).value;
    window.location.href = newLang === "es" ? "/" : `/${newLang}`;
  });

  const updateLogo = () => {
    const logoElement = document.getElementById("logo") as HTMLImageElement;
    const isDark = document.documentElement.classList.contains("dark");
    console.log(isDark);
    logoElement.src = isDark ? WhiteLogo.src : Logo.src;
  };
  updateLogo();

  const observer = new MutationObserver(updateLogo);
  observer.observe(document.documentElement, {
    attributes: true,
    attributeFilter: ["class"],
  });
</script>
